version: "3.2"

services:
  php:
    build: 
      context: .
      dockerfile: './.docker/php/Dockerfile' 
      args:
        UID: ${UID}
        GID: ${GID}
    networks:
      - backend
    volumes:
      - ./container/config:/var/www/html/config
      - ./container/templates:/var/www/html/templates
      - ./container/modules:/var/www/html/modules
      - ./container/web:/var/www/html/web
      - ./container/.env:/var/www/html/.env
      - vendor:/var/www/html/vendor # Shared with the composer service. Built packages will be mounted here.

  webserver:
    build: 
      context: .
      dockerfile: './.docker/apache/Dockerfile'
    env_file:
      './.docker/apache/.env'
    environment:
      - DOCUMENT_ROOT=/var/www/html/web
      - SERVER_NAME=www.talleys.test
      - SERVER_ALIAS=talleys.test
      - VIRTUAL_HOST=talleys.test
    depends_on:
      - php
      - database
    networks:
      - frontend
      - backend
      - default
    expose:
      - 80
    volumes:
      - ./container/web:/var/www/html/web

  database:
    image: mariadb:10.3
    env_file:
      './.docker/mariadb/.env'
    volumes:
      - ./.docker/mariadb/seed:/docker-entrypoint-initdb.d:ro
      - database:/var/lib/mysql
    networks:
      - backend
    labels:
      - db.network.tunnel.hostname=talleys.test

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    depends_on :
       - database
    networks: 
      - backend
    external_links:
      - db:database
    ports:
      - 8181:80
    environment:
      MYSQL_USERNAME: root
      MYSQL_ROOT_PASSWORD: rootpassword

  composer:
    build: 
      context: .
      dockerfile: './.docker/composer/Dockerfile'
      args:
        UID: ${UID}
        GID: ${GID}
    volumes:
      - ./container/composer.json:/app/composer.json # Mount the hosts composer JSON file in this container.
      - ./container/composer.lock:/app/composer.lock
      - vendor:/app/vendor # Named VOLUME shared with the php service for installed composer packages.
    command: "composer install"

  node:
    build: 
      context: .
      dockerfile: './.docker/node/Dockerfile'
      args:
        UID: ${UID}
        GID: ${GID}
    volumes:
      - ./container/package.json:/app/package.json
      - ./container/mix-manifest.json:/app/mix-manifest.json
      - ./container/web/mix-manifest.json:/app/public/mix-manifest.json
      - ./container/webpack.mix.js:/app/webpack.mix.js
      - ./container/yarn.lock:/app/yarn.lock
      - ./container/web/js:/app/public/js
      - ./container/web/css:/app/public/css
      - ./container/web/scss:/app/public/scss
    command: sh -c "yarn && yarn watch"

networks:
  default:
    external:
      name: nginx-proxy
  frontend:
  backend:

volumes:
  database:
  vendor: